function lungNoduleDetectionGUI()
    fig = uifigure('Name', 'Lung Nodule Detection', 'Position', [100, 100, 900, 700], 'Color', [0.2, 0.2, 0.2]);

    uilabel(fig, 'Position', [300, 650, 300, 30], 'Text', 'Lung Nodule Detection', ...
        'FontSize', 20, 'FontWeight', 'bold', 'FontColor', [1, 1, 1]);

    uilabel(fig, 'Position', [20, 600, 100, 30], 'Text', 'Select Image:', 'FontColor', [0.8, 0.8, 0.8], 'FontWeight', 'bold');
    btnBrowse = uibutton(fig, 'push', 'Text', 'Browse', 'Position', [120, 600, 100, 30], ...
        'ButtonPushedFcn', @(btn, event) browseImage(), 'BackgroundColor', [0.3, 0.3, 0.3], ...
        'FontWeight', 'bold', 'FontColor', [1, 1, 1]);

    btnSmall = uibutton(fig, 'push', 'Text', '<2mm', 'Position', [20, 550, 80, 30], ...
        'ButtonPushedFcn', @(btn, event) detectNodules('small'), 'BackgroundColor', [0.3, 0.5, 0.3], ...
        'FontWeight', 'bold', 'FontColor', [1, 1, 1]);
    btnMedium = uibutton(fig, 'push', 'Text', '2mm to 8mm', 'Position', [110, 550, 100, 30], ...
        'ButtonPushedFcn', @(btn, event) detectNodules('medium'), 'BackgroundColor', [0.5, 0.5, 0.3], ...
        'FontWeight', 'bold', 'FontColor', [1, 1, 1]);
    btnLarge = uibutton(fig, 'push', 'Text', '>8mm', 'Position', [220, 550, 80, 30], ...
        'ButtonPushedFcn', @(btn, event) detectNodules('large'), 'BackgroundColor', [0.5, 0.3, 0.3], ...
        'FontWeight', 'bold', 'FontColor', [1, 1, 1]);

    chkEnhance = uicheckbox(fig, 'Text', 'Enhanced Image', 'Position', [20, 500, 120, 30], ...
        'FontColor', [0.9, 0.9, 0.9], 'FontWeight', 'bold');
    chkNoiseReduction = uicheckbox(fig, 'Text', 'Noise Removed Image', 'Position', [20, 470, 140, 30], ...
        'FontColor', [0.9, 0.9, 0.9], 'FontWeight', 'bold');
    chkEdgeDetection = uicheckbox(fig, 'Text', 'Edge Detection', 'Position', [20, 440, 120, 30], ...
        'FontColor', [0.9, 0.9, 0.9], 'FontWeight', 'bold');
    chkBinaryImage = uicheckbox(fig, 'Text', 'Binary Image', 'Position', [20, 410, 120, 30], ...
        'FontColor', [0.9, 0.9, 0.9], 'FontWeight', 'bold');

    btnOutput = uibutton(fig, 'push', 'Text', 'Show Output', 'Position', [120, 370, 100, 30], ...
        'ButtonPushedFcn', @(btn, event) showOutput(), 'BackgroundColor', [0.3, 0.3, 0.3], ...
        'FontWeight', 'bold', 'FontColor', [1, 1, 1]);

    ax = uiaxes(fig, 'Position', [300, 100, 550, 500]);
    ax.Color = [0.1, 0.1, 0.1];

    riskLabel = uilabel(fig, 'Position', [300, 50, 550, 30], 'Text', '', ...
        'FontSize', 12, 'FontWeight', 'bold', 'HorizontalAlignment', 'center', 'FontColor', [1, 1, 1]);

    img = [];

    function browseImage()
        [file, path] = uigetfile({'*.jpg;*.png;*.JPG;*.PNG', 'Image Files (*.jpg, *.png)'}, 'Select Lung CT Image');
        if isequal(file, 0)
            uialert(fig, 'No file selected.', 'Error');
            return;
        end
        imgPath = fullfile(path, file);
        img = imread(imgPath);
        if size(img, 3) == 3
            img = rgb2gray(img); 
        end
        imshow(img, 'Parent', ax);
        title(ax, 'Original Lung CT Image', 'FontWeight', 'bold', 'Color', [0.8, 0.8, 0.8]);
        riskLabel.Text = '';
    end

    function detectNodules(sizeCategory)
        if isempty(img)
            uialert(fig, 'Please load an image first.', 'Error');
            return;
        end

        enhanced_img = imadjust(img);

        switch sizeCategory
            case 'small'  % Nodules < 2mm
                filtered_img = medfilt2(enhanced_img, [3 3]);
                se = strel('disk', 2);
                areaMin = 20;
                areaMax = 50;
                riskLabel.Text = 'Cancer risk: < 1%';
                riskLabel.FontColor = [0.1, 0.8, 0.1];  % Green for low risk
            case 'medium'  % Nodules 2mm to 8mm
                filtered_img = medfilt2(enhanced_img, [5 5]);
                se = strel('disk', 5);
                areaMin = 50;
                areaMax = 200;
                riskLabel.Text = 'Cancer risk: 1-2%';
                riskLabel.FontColor = [0.9, 0.7, 0.2];  % Yellow for moderate risk
            case 'large'  % Nodules > 8mm
                filtered_img = medfilt2(enhanced_img, [7 7]);
                se = strel('disk', 7);
                areaMin = 200;
                areaMax = 3500;
                riskLabel.Text = 'Cancer risk: 9-10%';
                riskLabel.FontColor = [0.9, 0.2, 0.2];  % Red for high risk
        end

        binary_img = imbinarize(filtered_img, graythresh(filtered_img));
        cleaned_img = imopen(binary_img, se);

        labeled_img = bwlabel(cleaned_img);
        stats = regionprops(labeled_img, 'Area', 'BoundingBox');

        imshow(img, 'Parent', ax);
        hold(ax, 'on');
        nodule_count = 0;
        for i = 1:length(stats)
            if stats(i).Area >= areaMin && stats(i).Area <= areaMax
                nodule_count = nodule_count + 1;
                rectangle(ax, 'Position', stats(i).BoundingBox, 'EdgeColor', 'r', 'LineWidth', 2);
            end
        end
        hold(ax, 'off');

        title(ax, sprintf('Detected Lung Nodules (%s) - Count: %d', sizeCategory, nodule_count), ...
            'FontWeight', 'bold', 'Color', [0.8, 0.8, 0.8]);
    end

    function showOutput()
        if isempty(img)
            uialert(fig, 'Please load an image first.', 'Error');
            return;
        end
        
        outputFig = figure('Name', 'Output Images', 'Position', [200, 200, 900, 600], 'Color', [0.2, 0.2, 0.2]);

        subplot(2, 3, 1), imshow(img), title('Original Image', 'Color', [1, 1, 1], 'FontWeight', 'bold');

        enhanced_img = [];
        filtered_img = [];
        edges = [];
        binary_img = [];
        cleaned_img = [];

        if chkEnhance.Value
            enhanced_img = imadjust(img);
            subplot(2, 3, 2), imshow(enhanced_img), title('Enhanced Image', 'Color', [0.6, 0.8, 1], 'FontWeight', 'bold');
        end

        if chkNoiseReduction.Value
            if isempty(enhanced_img), enhanced_img = imadjust(img); end
            filtered_img = medfilt2(enhanced_img, [3 3]);
            subplot(2, 3, 3), imshow(filtered_img), title('Noise Removed Image', 'Color', [0.7, 0.8, 1], 'FontWeight', 'bold');
        end

        if chkEdgeDetection.Value
            if isempty(filtered_img), filtered_img = medfilt2(imadjust(img), [3 3]); end
            edges = edge(filtered_img, 'Canny');
            subplot(2, 3, 4), imshow(edges), title('Edge Detection', 'Color', [0.8, 0.6, 1], 'FontWeight', 'bold');
        end

        if chkBinaryImage.Value
            if isempty(filtered_img), filtered_img = medfilt2(imadjust(img), [3 3]); end
            threshold_level = graythresh(filtered_img);
            binary_img = imbinarize(filtered_img, threshold_level);
            subplot(2, 3, 5), imshow(binary_img), title('Binary Image', 'Color', [1, 0.6, 0.7], 'FontWeight', 'bold');
        end
    end
end
